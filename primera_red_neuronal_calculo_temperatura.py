# -*- coding: utf-8 -*-
"""Primera red neuronal -calculo temperatura.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1luqxLRQlzGDscOJkYCMj62HBxuxXAKh_
"""

import tensorflow as tf
import numpy as np

Celsius=np.array([-40, -10, 0, 5, 15, 25, 45], dtype=float)
Fahrenheit=np.array([-40, 14, 32, 41, 59, 77,113], dtype=float)

#capa = tf.keras.layers.Dense(units=1,input_shape=[1])
#modelo=tf.keras.Sequential([capa])
oculta1 = tf.keras.layers.Dense(units=2, input_shape=[1])
oculta2 = tf.keras.layers.Dense(units=2)
salida = tf.keras.layers.Dense(units=1)
modelo = tf.keras.Sequential([oculta1, oculta2, salida])

modelo.compile(
  optimizer=tf.keras.optimizers.Adam(0.1),
 loss='mean_squared_error'
)

print("Comenzando entrenamiento…")
historial=modelo.fit(Celsius, Fahrenheit, epochs=1000, verbose=False)
print("Modelo Entrenado")

import matplotlib.pyplot as plt
plt.xlabel("# Epoca")
plt.ylabel("Magnitud de pérdida")
plt.plot(historial.history["loss"])

print("hagamos una prediccion")
resultado = modelo.predict(np.array([43]))
# Redondear a 1 decimal
resultado_redondeado = round(resultado[0][0], 1)
# Convertir a entero si no tiene decimales
if resultado_redondeado.is_integer():
    resultado_redondeado = int(resultado_redondeado)
print("\n\nel resultado es "+ str(resultado_redondeado) +" fahrenheit\n\n")

print("Variables internas del módelo")
#print(capa.get_weights())
print(oculta1.get_weights())
print(oculta2.get_weights())
print(salida.get_weights())