# -*- coding: utf-8 -*-
"""Red Neuronal clasificación de imágenes.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1GB_hzQwJxMatIaxb1PspX2F_pDqUC2vO
"""

# Importar las bibliotecas necesarias
import tensorflow as tf
from tensorflow.keras import layers, models
from tensorflow.keras.utils import to_categorical
import numpy as np
import matplotlib.pyplot as plt
from sklearn.metrics import confusion_matrix, ConfusionMatrixDisplay

# Cargar el dataset MNIST y dividirlo en entrenamiento y prueba
(train_images, train_labels), (test_images, test_labels) = tf.keras.datasets.mnist.load_data()

# Normalizar las imágenes para que los valores estén entre 0 y 1
train_images = train_images / 255.0
test_images = test_images / 255.0

# Aplanar las imágenes de 28x28 a un vector de 784 para la entrada de la red neuronal
train_images = train_images.reshape((train_images.shape[0], 28 * 28))
test_images = test_images.reshape((test_images.shape[0], 28 * 28))

# Convertir las etiquetas a categóricas
train_labels = to_categorical(train_labels)
test_labels = to_categorical(test_labels)

# Definir la red neuronal profunda
model = models.Sequential()
model.add(layers.Dense(512, activation='relu', input_shape=(784,)))
model.add(layers.Dense(256, activation='relu'))
model.add(layers.Dense(128, activation='relu'))
model.add(layers.Dense(10, activation='softmax'))

# Compilar el modelo
model.compile(optimizer='adam',
              loss='categorical_crossentropy',
              metrics=['accuracy'])

# Entrenar la red neuronal
history = model.fit(train_images, train_labels, epochs=10, batch_size=128, validation_split=0.2)

# Evaluar el rendimiento en el conjunto de prueba
test_loss, test_accuracy = model.evaluate(test_images, test_labels)
print(f"Precisión en el conjunto de prueba: {test_accuracy * 100:.2f}%")

# Generar la matriz de confusión
test_predictions = model.predict(test_images)
test_pred_labels = np.argmax(test_predictions, axis=1)
test_true_labels = np.argmax(test_labels, axis=1)

conf_matrix = confusion_matrix(test_true_labels, test_pred_labels)
ConfusionMatrixDisplay(conf_matrix, display_labels=range(10)).plot(cmap=plt.cm.Blues)
plt.show()

# Visualizar algunas predicciones y comparar con las etiquetas reales
num_images = 5
indices = np.random.choice(range(len(test_images)), num_images)

plt.figure(figsize=(10, 5))
for i, idx in enumerate(indices):
    image = test_images[idx].reshape(28, 28)
    true_label = test_true_labels[idx]
    pred_label = test_pred_labels[idx]
    plt.subplot(1, num_images, i + 1)
    plt.imshow(image, cmap='gray')
    plt.title(f"Real: {true_label}, Pred: {pred_label}")
    plt.axis('off')
plt.show()